#include <windows.h>
#include <iostream>
#include <cstring>

using namespace std;

int main(int argc, char *argv[]) {
    if (argc != 4 || strcmp(argv[2], "--command") != 0) {
        cout << "Usage: " << argv[0] << " <IP_Address> --command <command>" << endl;
        return 1;
    }

    // Extract IP address and command from command line arguments
    char ipAddress[16];
    char command[256];

    strncpy(ipAddress, argv[1], sizeof(ipAddress));
    strncpy(command, argv[3], sizeof(command));

    // Initialize WinSock
    WSADATA wsaData;
    WORD wVersionRequested = MAKEWORD(2, 2);
    if (WSAStartup(wVersionRequested, &wsaData) != 0) {
        cerr << "Failed to initialize WinSock." << endl;
        return 1;
    }

    // Create a socket
    SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == INVALID_SOCKET) {
        cerr << "Failed to create socket." << endl;
        WSACleanup();
        return 1;
    }

    // Specify server address
    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr(ipAddress); // Convert IP address string to binary
    serverAddr.sin_port = htons(8888); // Custom port for communication

    // Connect to server
    if (connect(sock, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        cerr << "Failed to connect." << endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    // Send command to execute on the target machine
    if (send(sock, command, strlen(command), 0) == SOCKET_ERROR) {
        cerr << "Failed to send command." << endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    cout << "Command sent successfully." << endl;

    // Clean up WinSock
    closesocket(sock);
    WSACleanup();

    return 0;
}
